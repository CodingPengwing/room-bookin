// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid()) @db.Uuid
  role          UserRole   @default(USER)
  name          String
  email         String     @unique
  password      String
  bookings      Booking[]
  createdAt     DateTime   @default(now())
  status        UserStatus @default(ACTIVATED)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVATED
  DEACTIVATED
}

model Room {
  id          String    @id @default(cuid()) @db.Uuid
  name        String
  description String
  bookings    Booking[]
  createdAt   DateTime  @default(now())
}

model Booking {
  id        String   @id @default(cuid()) @db.Uuid
  date      DateTime
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}
